from futoshiki_csp import *
from propagators import *
import sys


'''4 X 4 easy'''
b1 = [
     [  [0,0,0,0],
        [0,0,0,0],
        [0,0,2,0],
        [0,0,0,3] ],  
     [  [(1,1), '>', (2,1)], 
        [(2,2), '<', (3,2)], 
        [(1,4), '>', (2,4)],
        [(2,4), '>', (3,4)]]]

'''4 X 4 hard'''
b2 = [
     [  [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0] ],  
     [  [(1,1), '>', (1,2)], 
        [(4,2), '<', (4,3)], 
        [(3,3), '>', (4,3)],
        [(3,4), '>', (4,4)]]]

'''5 X 5 hard'''
b3 = [
     [  [0,0,0,0,3],
        [0,0,0,0,0],
        [0,0,0,0,0],
        [0,0,0,0,0],
        [0,0,0,0,0] ],  
     [  [(1,1), '<', (2,1)], 
        [(2,1), '<', (3,1)], 
        [(3,1), '<', (3,2)],
        [(2,2), '>', (2,3)], 
        [(4,2), '>', (4,3)],
        [(1,4), '<', (1,5)], 
        [(4,4), '>', (4,5)], 
        [(4,5), '>', (5,5)]]]

'''6 X 6 hard'''
b4 = [
     [  [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0],
        [0,2,0,0,0,0],
        [0,0,0,0,0,0],
        [0,0,0,0,0,0]],  
     [  [(1,1), '>', (1,2)], 
        [(2,1), '>', (2,2)], 
        [(4,1), '<', (5,1)],
        [(5,1), '>', (5,2)], 
        [(5,1), '<', (6,1)], 
        [(2,3), '>', (2,4)],
        [(3,3), '<', (3,4)], 
        [(4,3), '<', (4,4)], 
        [(4,3), '>', (5,3)],
        [(5,3), '>', (6,3)], 
        [(1,4), '>', (2,4)], 
        [(5,4), '<', (6,4)],
        [(1,5), '<', (2,5)],
        [(2,6), '>', (3,6)],
        [(3,6), '>', (4,6)], 
        [(4,6), '>', (5,6)], 
        [(5,6), '>', (6,6)]]]

'''7 X 7 hard'''

b5 = [
     [  [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0],
        [0,0,0,2,0,0,5]],  
     [  [(1,1), '<', (1,2)], 
        [(2,1), '<', (3,1)], 
        [(3,1), '>', (3,2)],
        [(6,1), '<', (7,1)], 
        [(7,1), '<', (7,2)],

        [(1,2), '<', (2,2)],
        [(2,2), '<', (3,2)],

        [(3,3), '<', (3,4)],
        [(4,3), '>', (5,3)], 
        [(5,3), '>', (6,3)],

        [(1,4), '<', (1,5)],
        [(1,4), '>', (2,4)], 
        [(2,4), '>', (3,4)], 
        [(5,4), '>', (5,5)],
        [(6,4), '<', (6,5)],
        [(7,4), '>', (7,5)],

        [(2,5), '<', (3,5)], 
        [(4,5), '<', (5,5)], 
        [(5,5), '<', (6,5)],

        [(1,6), '<', (1,7)],
        [(1,6), '>', (2,6)], 
        [(6,6), '>', (7,6)],

        [(1,7), '<', (2,7)],
        [(2,7), '<', (3,7)], 
        [(5,7), '>', (6,7)]]]

def print_sudo_soln(var_array):
    for row in var_array:
        print([var.get_assigned_value() for var in row])

if __name__ == "__main__":
    for b in [b1, b2, b3, b4, b5]:
    #for b in [g1_test_board_0]:
        print("Solving board:")
        for row in b[0]:
            print(row)
        print("With In-equality")
        for ine in b[1]:
            print(ine)
        print("Using Model 1")
        csp, var_array = futoshiki_csp_model_1(b)
        a = csp.get_all_cons()
        for c in a:
            print(c, '---------------')
        solver = BT(csp)
        print("=======================================================")
        print("GAC")
        solver.bt_search(prop_GAC)
        print("Solution")
        print_sudo_soln(var_array)

        sys.exit(0)

        print("Using Model 2")
        csp, var_array = futoshiki_csp_model_2(b)
        solver = BT(csp)
        print("=======================================================")
        print("GAC")
        solver.bt_search(prop_GAC)
        print("Solution")
        print_sudo_soln(var_array)
        print("=======================================================")
